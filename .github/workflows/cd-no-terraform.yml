name: Deploy to Amazon ECS

on:
  workflow_dispatch:
  

defaults:
  run:
    working-directory: backend/grabtable

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: grabtable
  ECS_SERVICE: alb-version-service
  ECS_CLUSTER: terraform-ecs-cluster
  ECS_TASK_DEFINITION: backend/grabtable/task-definition.json
  CONTAINER_NAME: terraform-container-definition

jobs:
  build-and-deploy:
    name: Build and ECS Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.ACTION_TOKEN }}
        submodules: true

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2

    - name: Gradle build
      run: ./gradlew build --exclude-task test --exclude-task asciidoctor

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_DEPLOY_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Stop existing ECS tasks
      run: |
        ecs_tasks=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query taskArns --output text)
        if [ -n "$ecs_tasks" ]; then
          for task in $ecs_tasks; do
            aws ecs stop-task --cluster ${{ env.ECS_CLUSTER }} --task $task
          done
        fi

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
