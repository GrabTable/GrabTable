plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'jacoco'
}

group = 'edu.skku'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // auth
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //payment
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.21'
    //spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation 'io.micrometer:micrometer-registry-prometheus'
//    implementation 'org.flywaydb:flyway-mysql:10.8.1'

}

tasks.register('copyYml', Copy) {
    from "./config/yml/main"
    include "*.yml"
    into "./src/main/resources"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

tasks.register('copyTestYml', Copy) {
    from "./config/yml/test"
    include "*.yml"
    into "./src/test/resources"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

tasks.register('copySql', Copy) {
    from "./config/sql/main"
    include "*.sql"
    into "./src/main/resources"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

tasks.register('copyTestSql', Copy) {
    from "./config/sql/test"
    include "*.sql"
    into "./src/test/resources/data"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

asciidoctor {
    inputs.dir snippetsDir
    baseDirFollowsSourceFile()
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

build {
    dependsOn copyDocument
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

processResources.dependsOn(copyYml, copySql)
processTestResources.dependsOn(copyTestYml, copyTestSql)

