plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'edu.skku'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

sonar {
    properties {
        property "sonar.projectKey", "GrabTable_GrabTable"
        property "sonar.organization", "grabtable"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.exclusions', '**/test/**, **/*Doc*.java, **/resources/** ,**/*Application*.java , **/*Config*.java,' +
                '**/*Request*.java, **/*Response*.java ,**/*Exception*.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //auth
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //iamport payment
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.21'
    //spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation 'io.micrometer:micrometer-registry-prometheus'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.27.0'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //flyway
    implementation 'org.flywaydb:flyway-mysql'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'


}

tasks.register('copyYml', Copy) {
    from "./config/yml/main"
    include "*.yml"
    into "./src/main/resources"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

tasks.register('copyTestYml', Copy) {
    from "./config/yml/test"
    include "*.yml"
    into "./src/test/resources"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

tasks.register('copySql', Copy) {
    from "./config/sql/main"
    include "*.sql"
    into "./src/main/resources"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

tasks.register('copyTestSql', Copy) {
    from "./config/sql/test"
    include "*.sql"
    into "./src/test/resources/data"
    eachFile { FileCopyDetails fcp ->
        if (new File(destinationDir, fcp.relativePath.getPathString()).exists()) {
            fcp.exclude()
        }
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

asciidoctor {
    inputs.dir snippetsDir
    baseDirFollowsSourceFile()
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Config*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Exception*"
                    ])
                })
        )
    }
}

subprojects {
    apply plugin: 'org.sonarqube'

    sonarqube {
        properties {
            property 'sonar.java.binaries', layout.buildDirectory.dir("classes").get()
                    .asFile
            property 'sonar.coverage.jacoco.xmlReportPaths', layout.buildDirectory.dir("reports/jacoco/test/jacocoTestReport.xml").get()
                    .asFile
        }
    }
}

build {
    dependsOn copyDocument
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

processResources.dependsOn(copyYml, copySql)
processTestResources.dependsOn(copyTestYml, copyTestSql)

